import java.util.LinkedList;
import java.util.Random;


public class MemoryManager {

	//The allocation strategies 
	public static final int FIRSTFIT = 0;
	public static final int NEXTFIT = 1;
	
	public static final int TAGSIZE = 2;
	
	
	int currentFreeIndex; //This is the indexd of the current freed block
	int allocationStrategy;
	int[] memory;
	
	int count; // The amount of holes searched in this iteration
	
	Random r; //Used to randomly generate a block to release
	
	public LinkedList<Integer> allocatedSpaces = new LinkedList<Integer>();
	/**
	 * @param args
	 */
	
	
//	public static void main(String[] args) {
//		
//		MemoryManager m = new MemoryManager(10,FIRSTFIT);
//		
//		m.mmRequest(2);
//		m.mmRequest(7);
//
//		System.out.println("Done");
//	}
	public MemoryManager(int memorySize, int allocationStrategy) {
		memory = new int[memorySize + TAGSIZE];
		r = new Random();
		memory[0] = memorySize * -1; //First size tag
		memory[1] = -1; //Pointer to previous free block
		memory[2] = -1; //Pointer to next free block
		currentFreeIndex = 0;
		memory[memorySize + TAGSIZE - 1] = memorySize * -1; //Second tag size
		this.allocationStrategy = allocationStrategy;
		count = 0;
	}
	
	public void resetCount() {
		count = 0;
	}
	public int getCount() {
		return count;
	}
	
	public void releaseRandomBlock() {
		if(allocatedSpaces.size() == 0)
			return;
		int randomValue = r.nextInt(allocatedSpaces.size());
		int index = allocatedSpaces.remove(randomValue);
		mmRelease(index);
	}
	
	/** 
	 * Grabs the next free memory connected to this block's freed memory.
	 * If the currentIndex is a free memory, it will use the pointer to get the next free memory.
	 * 
	 * Otherwise, it will seek allocation by allocation until it finds a free memory
	 * @param currentIndex
	 * @return
	 */
	public int getNextFreeMemory(int currentIndex) {
		if(currentIndex == 101)
			System.out.println("PROBLEM");
		if(memory[currentIndex] < 0) //If this is a free element, return this element's pointer
			return memory[currentIndex + 2]; //ONLY TIME THE POINTERS ARE EVER USED
		else
			return findNextRightFreeSpace(currentIndex);
	}
	
	

	
	/**
	 * Allocate a piece of memory, and return false if it fails, true if it works
	 * @param memorySize
	 */
	public boolean mmRequest(int memorySize) {
		System.out.println("Requesting mem size:" + memorySize);

		int startIndex = currentFreeIndex;
		boolean allocated = false; // Whether a successful allocation was made or not
		
		do{
			if(doesFit(currentFreeIndex, memorySize)) {
				alloc(currentFreeIndex,memorySize);
				allocated = true;
				allocatedSpaces.add(currentFreeIndex);
				break;
				
			}
			
			currentFreeIndex = getNextFreeMemory(currentFreeIndex); //THIS IS NOT THE BEST IT COULD BE
			count++;
			if(currentFreeIndex == -1) //We've reached the end, loop back around
				currentFreeIndex = 0;	
			
		} while(currentFreeIndex != startIndex);

		
		if(allocationStrategy == FIRSTFIT)
			currentFreeIndex = 0;
		else { //for best fit, we keep the index where it is
		}
		
		return allocated;
			
	}
	
	public void mmRelease(int indexToBeReleased) {
		System.out.println("Releasing index:" + indexToBeReleased);
		
		int leftMemoryIndex = getLeftMemoryIndex(indexToBeReleased);
		int rightMemoryIndex = getRightMemoryIndex(indexToBeReleased);
		int size = memory[indexToBeReleased];
		int newSize = -1;

		if(leftMemoryIndex != -1 && memory[leftMemoryIndex] < 0 
				&& rightMemoryIndex != -1 && memory[rightMemoryIndex] < 0) { //left and right
				newSize = memory[indexToBeReleased] + memory[leftMemoryIndex] * -1 + memory[rightMemoryIndex] * -1 + 4; //8 is for 4 sizes, and 4 pointers that are no longer needed
				
				//Get new pointers
				int newLeftPointer = memory[leftMemoryIndex + 1];
				int newRightPointer = memory[rightMemoryIndex + 2];
				if(newLeftPointer != -1)
					memory[newLeftPointer + 2] = leftMemoryIndex; //THIS SHOULD ALREADY BE CORRECT
				if(newRightPointer != -1)
					memory[newRightPointer + 1] = leftMemoryIndex; 
				
			
				//Clear all the current data
				clearAllDataAllocated(indexToBeReleased);
				clearAllDataFree(leftMemoryIndex);
				clearAllDataFree(rightMemoryIndex);

				//Set new pointers
				memory[leftMemoryIndex] = newSize * -1;
				memory[leftMemoryIndex + 1] = newLeftPointer; //THIS SHOULD ALREADY BE CORRECT
				memory[leftMemoryIndex + 2] = newRightPointer;
				memory[leftMemoryIndex + newSize + 1] = newSize * -1;
		} else if(leftMemoryIndex != -1 && memory[leftMemoryIndex] < 0) { //Left is free
			newSize = memory[indexToBeReleased] + memory[leftMemoryIndex] * -1 + 2;
			
			//Get new pointers
			int newLeftPointer = memory[leftMemoryIndex + 1];
			int newRightPointer = findNextRightFreeSpace(indexToBeReleased);
			
			if(newLeftPointer != -1)
				memory[newLeftPointer + 2] = leftMemoryIndex; //THIS SHOULD ALREADY BE CORRECT
			
			if(newRightPointer != -1)
				memory[newRightPointer + 1] = leftMemoryIndex; 
			
		
			//Clear all the current data
			clearAllDataAllocated(indexToBeReleased);
			clearAllDataFree(leftMemoryIndex);

			//Set new pointers
			memory[leftMemoryIndex] = newSize * -1;
			memory[leftMemoryIndex + 1] = newLeftPointer; //THIS SHOULD ALREADY BE CORRECT
			memory[leftMemoryIndex + 2] = newRightPointer;
			memory[leftMemoryIndex + newSize + 1] = newSize * -1;

		} else if (rightMemoryIndex != -1 && memory[rightMemoryIndex] < 0) { //Just the right
			newSize = memory[indexToBeReleased] + memory[rightMemoryIndex] * -1 + 2;
			
			//Get new pointers
			int newLeftPointer = findNextLeftFreeSpace(indexToBeReleased);
			int newRightPointer = memory[rightMemoryIndex + 2];
			
			if(newLeftPointer != -1)
				memory[newLeftPointer + 2] = indexToBeReleased; //THIS SHOULD ALREADY BE CORRECT
			if(newRightPointer != -1)
				memory[newRightPointer + 1] = indexToBeReleased; 
			
		
			//Clear all the current data
			clearAllDataAllocated(indexToBeReleased);
			clearAllDataFree(rightMemoryIndex);

			//Set new pointers
			memory[indexToBeReleased] = newSize * -1;
			memory[indexToBeReleased + 1] = newLeftPointer; //THIS SHOULD ALREADY BE CORRECT
			memory[indexToBeReleased + 2] = newRightPointer;
			memory[indexToBeReleased + newSize + 1] = newSize * -1;
		} else { //Just this item
			newSize = memory[indexToBeReleased];
			
			//Get new pointers
			int newLeftPointer = findNextLeftFreeSpace(indexToBeReleased);
			int newRightPointer = findNextRightFreeSpace(indexToBeReleased);
			
			if(newLeftPointer != -1)
				memory[newLeftPointer + 2] = indexToBeReleased; //THIS SHOULD ALREADY BE CORRECT
			if(newRightPointer != -1)
			memory[newRightPointer + 1] = indexToBeReleased; 
			
		
			//Clear all the current data
			clearAllDataAllocated(indexToBeReleased);

			//Set new pointers
			memory[indexToBeReleased] = newSize * -1;
			memory[indexToBeReleased + 1] = newLeftPointer; //THIS SHOULD ALREADY BE CORRECT
			memory[indexToBeReleased + 2] = newRightPointer;
			memory[indexToBeReleased + newSize + 1] = newSize * -1;
		}
		
	}
	
	/**
	 * Clear all the data associated with this index
	 * @param index
	 */
	public void clearAllDataFree(int index) {
		int size = memory[index] * -1;
		memory[index] = 0;
		memory[index + 1] = 0; //left pointer is 0
		memory[index + 2] = 0; //right pointer is 0
		memory[index + size + 1] = 0;
	}
	
	/**
	 * Clear all the data associated with this index
	 * @param index
	 */
	public void clearAllDataAllocated(int index) {
		int size = memory[index];
		memory[index] = 0;
		memory[index + size + 1] = 0;
	}
	
	public void alloc(int currentIndex, int size) {

		System.out.println("Requesting index:" + currentIndex + " with size" + size);
		int freeSize = memory[currentIndex] * -1; // Value is negative, so multiply by -1
		memory[currentIndex] = size; // Set left size tag
		memory[currentIndex + 1] = 0; // Set the pointers to 0
		memory[currentIndex + 2] = 0; // Set the pointers to 0
		memory[currentIndex + size + 1] = size; // Set right size tag, giving one more than the total space
		
		int rightIndex = getRightMemoryIndex(currentIndex);
		if(rightIndex == -1) //We fully allocated the whole space, return 
			return;
		
		//THIS ONLY WORKS IF PAST MEMORY IS CLEARED CORRECTLYYYYYYYYYYYYY
		if(memory[rightIndex] > 0) //We perfectly allocated a space, so no need to add the free space 
			return;
		int sizeLeft = freeSize - size - 2; //2 for the new tags,

		memory[rightIndex] = sizeLeft * -1;
		memory[rightIndex + 1] = findNextLeftFreeSpace(rightIndex);
		memory[rightIndex + 2] = findNextRightFreeSpace(rightIndex);
		memory[rightIndex + sizeLeft + 1] = sizeLeft * -1; //Go forward free space + the size pointer
		
	}
	
	/**
	 * Gets the amount of memory to the allocated blocks left and right of the current block.
	 * Returns -1 if there is nothing to the left or right
	 * @param left set to true for the left block, false for the right block
	 * @return
	 */
	
	public int findNextLeftFreeSpace(int currentIndex){
		currentIndex = getLeftMemoryIndex(currentIndex);
		while(currentIndex >= 0){
			if(memory[currentIndex] < 0) {
				return currentIndex;
			}
			
			currentIndex = getLeftMemoryIndex(currentIndex);

		}
		
		return -1; //If a space isn't found, there is no free space to the left, so make the pointer -1
	}
	
	public int findNextRightFreeSpace(int currentIndex) {
		if(currentIndex == 101)
			System.out.println("PROBLEM");
		currentIndex = getRightMemoryIndex(currentIndex);

		while(currentIndex > 0){
			if(currentIndex == 101)
				System.out.println("PROBLEM");
			if(memory[currentIndex] < 0)
				return currentIndex;
			currentIndex = getRightMemoryIndex(currentIndex);
		}
		
		return -1; //If a space isn't found, there is no free space to the right, so make the pointer -1
	}
	
	public int getLeftMemoryIndex(int currentIndex) {
		if (currentIndex < 0)
			System.out.println("WE HAVE A PROBLEM");
		if(currentIndex - 1 < 0)
			return -1;
		else {
			int size = memory[currentIndex - 1];
			return currentIndex - 1 - Math.abs(size) - 1; //current index - 1 to get to size - size to get to beginning of size - 1 to get to index
		}
	}
	
	public int getRightMemoryIndex(int currentIndex) {
		if(currentIndex == 101)
			System.out.println("BIG PROBLEMS IN GET RIGHT MEMORY");
		if(currentIndex + Math.abs(memory[currentIndex]) + 2 >= memory.length)
			return -1;
		else
			return currentIndex + Math.abs(memory[currentIndex]) + 2; // Current index + the size of the currentIndex + tag for this + tag for next 
	}

	/**
	 * Checks to see if there's enough memory at this space to create an insert.
	 * NOTE that when we allocate free memory, we need at least 3 spaces for the tag + 2 pointers for the rest of the free space
	 * If this doesn't exist, we can't satisfy the request. Also note a prefectly fitting allocation works as well.
	 */
	public boolean doesFit(int currentIndex, int size) {
		if(memory[currentIndex] >= 0) // This space is occupied
			return false;
		
		//If the space requested EXACTLY equals the size, or the space requested has at least 3 extra spaces after it, return true
		if(memory[currentIndex] == (size * -1) || memory[currentIndex] <= ((size + 4) * -1))
			return true;
		else
			return false;
	}
	
	public static int getNextFreeIndex() {
		return -1;
		
	}
	public void setFreeTags(int index, int freeSpaceSize) {
		memory[index] = freeSpaceSize * -1; // Set free/allocated tag along with the amount of space that is free
		
	}

	public int getMemoryUtilization() {
		int total = 0;
		for(Integer i : allocatedSpaces) {
			total = total + memory[i];
		}
		return total;
	}

	public int getSearchTime() {
		int currentCount = this.count;
		resetCount();
		return currentCount;
	}
}
